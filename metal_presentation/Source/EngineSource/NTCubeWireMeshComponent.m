//
//  NTCubeMeshComponent.m
//  collision_detection_demo
//
//  Created by Nate on 10/19/14.
//  Copyright (c) 2014 ifcantel. All rights reserved.
//

#import "NTCubeWireMeshComponent.h"

//float  cubeEdges[80] = {
//    1.000000, -1.000000, -1.000000, 1, 0, 0, 0, -1,
//    1.000000, -1.000000, 1.000000, 1, 0, 0, 0, -1,
//    -1.000000, -1.000000, 1.000000, 1, 0, 0, 0, -1,
//    -1.000000, -1.000000, -1.000000, 1, 0, 0, 0, -1,
//    1.000000, 1.000000, -0.999999, 1, 0, 0, 0, -1,
//    0.999999, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000000, 1.000000, 1.000000, 1, 0, 0, 0, -1,
//    -1.000000, 1.000000, -1.000000, 1, 0, 0, 0, -1,
//    0.972834, -0.207012, 0.115213, 1, 0, 0, 0, -1,
//    0.972834, -0.207012, 0.115213, 1, 0, 0, 0, -1,
//};

//float cubeEdges[15 * 8] = {
//    
//    0.999999, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, -1.000000, -0.999999, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, -0.999999, 1, 0, 0, 0, -1,
//    
//    -1.000001, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, -0.999999, 1, 0, 0, 0, -1,
//    0.999999, -1.000000, 1.000001, 1, 0, 0, 0, -1,
//    -1.000001, -1.000000, 1.000001, 1, 0, 0, 0, -1,
//    
//    -1.000001, -1.000000, -0.999999, 1, 0, 0, 0, -1,
//    0.999999, -1.000000, -0.999999, 1, 0, 0, 0, -1,
//    -1.000001, -1.000000, 1.000001, 1, 0, 0, 0, -1,
//    0.999999, 1.000000, -0.999999, 1, 0, 0, 0, -1,
//    -1.000001, 1.000000, -0.999999, 1, 0, 0, 0, -1,
//    
////    0.999999, 1.000000, 1.000001, 1, 0, 0, 0, -1,
////    0.999999, 1.000000, -0.999999, 1, 0, 0, 0, -1,
////    0.999999, 1.000000, 1.000001, 1, 0, 0, 0, -1,
////    0.999999, -1.000000, -0.999999, 1, 0, 0, 0, -1,
////    0.999999, -1.000000, 1.000001, 1, 0, 0, 0, -1,
//};

//float cubeEdges[2 * 6 * 8] =
//{
//    // Data layout for each line below is:
//    // positionX, positionY, positionZ,     normalX, normalY, normalZ,
////    0.5, -0.5, 0.5,   0.0, -1.0,  0.0,1.0,
////    -0.5, -0.5, 0.5   0.0, -1.0, 0.0,1.0,
////    -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,1.0,
////    0.5, -0.5, -0.5,  0.0, -1.0,  0.0,1.0,
////    0.5, -0.5, 0.5,  0.0, -1.0,  0.0,1.0,
////    -0.5, -0.5, -0.5,  0.0, -1.0,  0.0,1.0,
////    
////    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,1.0,
////    0.5, -0.5, 0.5,  1.0,  0.0,  0.0,1.0,
////    0.5, -0.5, -0.5, 1.0,  0.0,  0.0,1.0,
////    0.5, 0.5, -0.5,  1.0, 0.0,  0.0,1.0,
////    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,1.0,
////    0.5, -0.5, -0.5,  1.0,  0.0,  0.0,1.0,
//    
////    -0.5, 0.5, 0.5,1.0,    0.0, 1.0,  0.0,1.0,
////    0.5, 0.5, 0.5,1.0,    0.0, 1.0,  0.0,1.0,
////    0.5, 0.5, -0.5,1.0,   0.0, 1.0,  0.0,1.0,
////    -0.5, 0.5, -0.5, 1.0,  0.0, 1.0,  0.0,1.0,
////    -0.5, 0.5, 0.5,1.0,    0.0, 1.0,  0.0,1.0,
////    0.5, 0.5, -0.5,1.0,   0.0, 1.0,  0.0,1.0,
////
////    -0.5, -0.5, 0.5, 1.0, -1.0,  0.0, 0.0,1.0,
////    -0.5, 0.5, 0.5,1.0,   -1.0, 0.0,  0.0,1.0,
////    -0.5, 0.5, -0.5,1.0,  -1.0, 0.0,  0.0,1.0,
////    -0.5, -0.5, -0.5,1.0,  -1.0,  0.0,  0.0,1.0,
////    -0.5, -0.5, 0.5,1.0,  -1.0,  0.0, 0.0,1.0,
////    -0.5, 0.5, -0.5,1.0,  -1.0, 0.0,  0.0,1.0,
////    
////    0.5, 0.5,  0.5,1.0,  0.0, 0.0,  1.0,1.0,
////    -0.5, 0.5,  0.5,1.0,  0.0, 0.0,  1.0,1.0,
////    -0.5, -0.5, 0.5,1.0,   0.0,  0.0, 1.0,1.0,
////    -0.5, -0.5, 0.5,1.0,   0.0,  0.0, 1.0,1.0,
////    0.5, -0.5, 0.5, 1.0,  0.0,  0.0,  1.0,1.0,
////    0.5, 0.5,  0.5,1.0,  0.0, 0.0,  1.0,1.0,
////    
////    0.5, -0.5, -0.5, 1.0, 0.0,  0.0, -1.0,1.0,
////    -0.5, -0.5, -0.5,1.0,   0.0,  0.0, -1.0,1.0,
////    -0.5, 0.5, -0.5,1.0,  0.0, 0.0, -1.0,1.0,
////    0.5, 0.5, -0.5, 1.0, 0.0, 0.0, -1.0,1.0,
////    0.5, -0.5, -0.5, 1.0, 0.0,  0.0, -1.0,1.0,
////    -0.5, 0.5, -0.5, 1.0, 0.0, 0.0, -1.0,1.0,
//};

float cubeEdges[16 * 2 * 8] = {
    
    // front
    -1, 1, 1, 1,     0, 0, -1, 1,
    1, 1, 1,  1,    0, 0, -1, 1,
    
    1, 1, 1,  1,    0, 0, -1, 1,
    1, -1, 1,  1,   0, 0, -1, 1,
    
    1, -1, 1, 1,    0, 0, -1, 1,
    -1, -1, 1,  1,   0, 0, -1, 1,
    
    -1, -1, 1, 1,    0, 0, -1, 1,
    -1, 1, 1,  1,    0, 0, -1, 1,
    
    //    // back
    -1, 1, -1,  1,    0, 0, -1, 1,
    1, 1, -1,  1,    0, 0, -1, 1,
    
    1, 1, -1,  1,    0, 0, -1, 1,
    1, -1, -1, 1,    0, 0, -1, 1,
    
    1, -1, -1,  1,   0, 0, -1, 1,
    -1, -1, -1, 1,    0, 0, -1, 1,
    
    -1, -1, -1,  1,   0, 0, -1, 1,
    -1, 1, -1, 1,     0, 0, -1, 1,
    
    // left
    -1, -1, 1, 1,     0, 0, -1, 1,
    -1, 1, 1,  1,    0, 0, -1, 1,
    
    -1, 1, 1, 1,     0, 0, -1, 1,
    -1, 1, -1, 1,    0, 0, -1, 1,
    
    -1, 1, -1, 1,    0, 0, -1, 1,
    -1, -1, -1, 1,    0, 0, -1, 1,
    
    -1, -1, -1, 1,    0, 0, -1, 1,
    -1, -1, 1,  1,    0, 0, -1, 1,
    
    // right
    1, -1, 1,  1,    0, 0, -1, 1,
    1, 1, 1,  1,    0, 0, -1, 1,
    
    1, 1, 1, 1,     0, 0, -1, 1,
    1, 1, -1,  1,   0, 0, -1, 1,
    
    1, 1, -1,  1,   0, 0, -1, 1,
    1, -1, -1, 1,    0, 0, -1, 1,
    
    1, -1, -1, 1,    0, 0, -1, 1,
    1, -1, 1, 1,     0, 0, -1, 1,
};


//float cubeEdges[16 * 2 * 6] = {
//    
//    // front
//    -1, 1, 1,     0, 0, -1,
//     1, 1, 1,     0, 0, -1,
//    
//     1, 1, 1,     0, 0, -1,
//     1, -1, 1,    0, 0, -1,
//    
//     1, -1, 1,    0, 0, -1,
//    -1, -1, 1,    0, 0, -1,
//    
//    -1, -1, 1,    0, 0, -1,
//    -1, 1, 1,     0, 0, -1,
//    
////    // back
//    -1, 1, -1,     0, 0, -1,
//    1, 1, -1,     0, 0, -1,
//    
//    1, 1, -1,     0, 0, -1,
//    1, -1, -1,    0, 0, -1,
//    
//    1, -1, -1,    0, 0, -1,
//    -1, -1, -1,    0, 0, -1,
//    
//    -1, -1, -1,    0, 0, -1,
//    -1, 1, -1,     0, 0, -1,
//    
//    // left
//    -1, -1, 1,     0, 0, -1,
//    -1, 1, 1,     0, 0, -1,
//
//    -1, 1, 1,     0, 0, -1,
//    -1, 1, -1,    0, 0, -1,
//    
//    -1, 1, -1,    0, 0, -1,
//    -1, -1, -1,    0, 0, -1,
//    
//    -1, -1, -1,    0, 0, -1,
//    -1, -1, 1,     0, 0, -1,
//    
//    // right
//    1, -1, 1,     0, 0, -1,
//    1, 1, 1,     0, 0, -1,
//    
//    1, 1, 1,     0, 0, -1,
//    1, 1, -1,    0, 0, -1,
//    
//    1, 1, -1,    0, 0, -1,
//    1, -1, -1,    0, 0, -1,
//    
//    1, -1, -1,    0, 0, -1,
//    1, -1, 1,     0, 0, -1
//};

//float cubeEdges[216 * 2] =
//{
//
//
//    // Data layout for each line below is:
//    // positionX, positionY, positionZ,     normalX, normalY, normalZ,
//    0.5, -0.5, 0.5,   0.0, -1.0,  0.0,
//    -0.5, -0.5, 0.5,   0.0, -1.0, 0.0,
//    -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
//    0.5, -0.5, -0.5,  0.0, -1.0,  0.0,
//    0.5, -0.5, 0.5,   0.0, -1.0,  0.0,
//    -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
//
//    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,
//    0.5, -0.5, 0.5,   1.0,  0.0,  0.0,
//    0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
//    0.5, 0.5, -0.5,   1.0, 0.0,  0.0,
//    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,
//    0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
//
//    -0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//    -0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//    -0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//
//    -0.5, -0.5, 0.5,  -1.0,  0.0, 0.0,
//    -0.5, 0.5, 0.5,   -1.0, 0.0,  0.0,
//    -0.5, 0.5, -0.5,  -1.0, 0.0,  0.0,
//    -0.5, -0.5, -0.5,  -1.0,  0.0,  0.0,
//    -0.5, -0.5, 0.5,  -1.0,  0.0, 0.0,
//    -0.5, 0.5, -0.5,  -1.0, 0.0,  0.0,
//
//    0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//    -0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//    -0.5, -0.5, 0.5,   0.0,  0.0, 1.0,
//    -0.5, -0.5, 0.5,   0.0,  0.0, 1.0,
//    0.5, -0.5, 0.5,   0.0,  0.0,  1.0,
//    0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//
//    0.5, -0.5, -0.5,  0.0,  0.0, -1.0,
//    -0.5, -0.5, -0.5,   0.0,  0.0, -1.0,
//    -0.5, 0.5, -0.5,  0.0, 0.0, -1.0,
//    0.5, 0.5, -0.5,  0.0, 0.0, -1.0,
//    0.5, -0.5, -0.5,  0.0,  0.0, -1.0,
//    -0.5, 0.5, -0.5,  0.0, 0.0, -1.0,
//
//
//    // Data layout for each line below is:
//    // positionX, positionY, positionZ,     normalX, normalY, normalZ,
//    0.5, -0.5, 0.5,   0.0, -1.0,  0.0,
//    -0.5, -0.5, 0.5,   0.0, -1.0, 0.0,
//    -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
//    0.5, -0.5, -0.5,  0.0, -1.0,  0.0,
//    0.5, -0.5, 0.5,   0.0, -1.0,  0.0,
//    -0.5, -0.5, -0.5,   0.0, -1.0,  0.0,
//
//    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,
//    0.5, -0.5, 0.5,   1.0,  0.0,  0.0,
//    0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
//    0.5, 0.5, -0.5,   1.0, 0.0,  0.0,
//    0.5, 0.5, 0.5,    1.0, 0.0,  0.0,
//    0.5, -0.5, -0.5,  1.0,  0.0,  0.0,
//
//    -0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//    -0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//    -0.5, 0.5, 0.5,    0.0, 1.0,  0.0,
//    0.5, 0.5, -0.5,   0.0, 1.0,  0.0,
//
//    -0.5, -0.5, 0.5,  -1.0,  0.0, 0.0,
//    -0.5, 0.5, 0.5,   -1.0, 0.0,  0.0,
//    -0.5, 0.5, -0.5,  -1.0, 0.0,  0.0,
//    -0.5, -0.5, -0.5,  -1.0,  0.0,  0.0,
//    -0.5, -0.5, 0.5,  -1.0,  0.0, 0.0,
//    -0.5, 0.5, -0.5,  -1.0, 0.0,  0.0,
//
//    0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//    -0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//    -0.5, -0.5, 0.5,   0.0,  0.0, 1.0,
//    -0.5, -0.5, 0.5,   0.0,  0.0, 1.0,
//    0.5, -0.5, 0.5,   0.0,  0.0,  1.0,
//    0.5, 0.5,  0.5,  0.0, 0.0,  1.0,
//
//    0.5, -0.5, -0.5,  0.0,  0.0, -1.0,
//    -0.5, -0.5, -0.5,   0.0,  0.0, -1.0,
//    -0.5, 0.5, -0.5,  0.0, 0.0, -1.0,
//    0.5, 0.5, -0.5,  0.0, 0.0, -1.0,
//    0.5, -0.5, -0.5,  0.0,  0.0, -1.0,
//    -0.5, 0.5, -0.5,  0.0, 0.0, -1.0
//};

@implementation NTCubeWireMeshComponent

- (void *)vertexData
{
    return cubeEdges;
}

- (NSUInteger)vertexCount
{
    static size_t vertexCount = 0;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        vertexCount = sizeof(cubeEdges)/(sizeof(float) * 8);
    });
    
    return vertexCount;
}

- (NSUInteger)vertexTotalSize
{
    static size_t vertexTotalSize = 0;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        vertexTotalSize = sizeof(cubeEdges);
//        vertexTotalSize = _vertexCount * sizeof(float);
    });

    return vertexTotalSize;
}

- (void *)indexData
{
    return NULL;
}

- (NSUInteger)indexCount
{
    return 0;
}

- (NSUInteger)indexTotalSize
{
    return 0;
}

- (MTLIndexType)indexType
{
    return MTLIndexTypeUInt16;
}


@end
